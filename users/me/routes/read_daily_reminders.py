from fastapi import APIRouter, Header
from fastapi.responses import Response
from pydantic import BaseModel, Field
from typing import List, Literal, Optional
from auth import auth_any
from models import STANDARD_ERRORS_BY_CODE
from itgs import Itgs
import asyncio


router = APIRouter()


class DailyReminderSMSItem(BaseModel):
    uid: str = Field(
        description="The uid corresponding to this subscription to daily reminders"
    )
    phone: str = Field(
        description="The phone number receiving notiifications, E.164 format"
    )
    start_time: int = Field(
        description="The earliest time phone receives notifications in seconds since midnight"
    )
    end_time: int = Field(
        description="The latest time phone receives notifications in seconds since midnight"
    )
    day_of_week_mask: int = Field(
        description="The days of the week the user receives notifications, as a bitmask where "
        "the least significant bit is Sunday and the most significant bit is Saturday"
    )
    created_at: float = Field(
        description="The time this subscription was created in seconds since the unix epoch"
    )


class DailyReminderEmailItem(BaseModel):
    uid: str = Field(
        description="The uid corresponding to this subscription to daily reminders"
    )
    email: str = Field(description="The email address receiving notifications")
    start_time: int = Field(
        description="The earliest time to receive notifications in seconds since midnight"
    )
    end_time: int = Field(
        description="The latest time to receive notifications in seconds since midnight"
    )
    day_of_week_mask: int = Field(
        description="The days of the week the user receives notifications, as a bitmask where "
        "the least significant bit is Sunday and the most significant bit is Saturday"
    )
    created_at: float = Field(
        description="The time this subscription was created in seconds since the unix epoch"
    )


class DailyReminderPushDevice(BaseModel):
    uid: str = Field(
        description="A unique identifier for this device generated by oseh"
    )
    platform: Literal["ios", "android", "generic"] = Field(
        description="Which platform the device is on"
    )
    created_at: float = Field(
        description="The time this device was added in seconds since the unix epoch"
    )


class DailyReminderPushItem(BaseModel):
    uid: str = Field(
        description="The uid corresponding to this subscription to daily reminders"
    )
    devices: List[DailyReminderPushDevice] = Field(
        description="The email address receiving notiifications"
    )
    start_time: int = Field(
        description="The earliest time to receive notifications in seconds since midnight"
    )
    end_time: int = Field(
        description="The latest time to receive notifications in seconds since midnight"
    )
    day_of_week_mask: int = Field(
        description="The days of the week the user receives notifications, as a bitmask where "
        "the least significant bit is Sunday and the most significant bit is Saturday"
    )
    created_at: float = Field(
        description="The time this subscription was created in seconds since the unix epoch"
    )


class DailyRemindersResponse(BaseModel):
    sms: Optional[DailyReminderSMSItem] = Field(
        description="The daily reminders subscription for SMS, if there is one"
    )
    email: Optional[DailyReminderEmailItem] = Field(
        description="The daily reminders subscription for email, if there is one"
    )
    push: Optional[DailyReminderPushItem] = Field(
        description="The daily reminders subscription for push, if there is one"
    )


@router.get(
    "/daily_reminders",
    response_model=DailyRemindersResponse,
    responses=STANDARD_ERRORS_BY_CODE,
)
async def read_daily_reminders(authorization: Optional[str] = Header(None)):
    """Reads the daily reminders of the authorized user."""
    async with Itgs() as itgs:
        auth_result = await auth_any(itgs, authorization)
        if not auth_result.success:
            return auth_result.error_response

        user_sub = auth_result.result.sub

        conn = await itgs.conn()
        cursor = conn.cursor("none")

        (sms_response, email_response, push_response) = await asyncio.gather(
            cursor.execute(
                """
                SELECT
                    user_daily_reminders.uid,
                    user_daily_reminders.start_time,
                    user_daily_reminders.end_time,
                    user_daily_reminders.day_of_week_mask,
                    user_daily_reminders.created_at,
                    users.phone_number
                FROM user_daily_reminders
                JOIN users ON users.id = user_daily_reminders.user_id
                WHERE
                    users.sub = ?
                    AND user_daily_reminders.channel = 'sms'
                    AND users.phone_number IS NOT NULL
                    AND users.phone_number_verified = 1
                """,
                (user_sub,),
            ),
            cursor.execute(
                """
                SELECT
                    user_daily_reminders.uid,
                    user_daily_reminders.start_time,
                    user_daily_reminders.end_time,
                    user_daily_reminders.day_of_week_mask,
                    user_daily_reminders.created_at,
                    users.email
                FROM user_daily_reminders
                JOIN users ON users.id = user_daily_reminders.user_id
                WHERE
                    users.sub = ?
                    AND user_daily_reminders.channel = 'email'
                    AND users.email_verified = 1
                    AND NOT EXISTS (
                        SELECT 1 FROM suppressed_emails 
                        WHERE suppressed_emails.email_address = users.email
                    )
                """,
                (user_sub,),
            ),
            cursor.execute(
                """
                SELECT
                    user_daily_reminders.uid,
                    user_daily_reminders.start_time,
                    user_daily_reminders.end_time,
                    user_daily_reminders.day_of_week_mask,
                    user_daily_reminders.created_at,
                    user_push_tokens.uid,
                    user_push_tokens.platform,
                    user_push_tokens.created_at
                FROM user_daily_reminders
                JOIN user_push_tokens ON user_push_tokens.user_id = user_daily_reminders.user_id
                JOIN users ON users.id = user_daily_reminders.user_id
                WHERE
                    users.sub = ?
                    AND user_daily_reminders.channel = 'push'
                """,
                (user_sub,),
            ),
        )

        sms = [
            DailyReminderSMSItem(
                uid=uid,
                phone=phone_number,
                start_time=start_time,
                end_time=end_time,
                day_of_week_mask=day_of_week_mask,
                created_at=created_at,
            )
            for (
                uid,
                start_time,
                end_time,
                day_of_week_mask,
                created_at,
                phone_number,
            ) in (sms_response.results or [])
        ]
        assert len(sms) <= 1

        email = [
            DailyReminderEmailItem(
                uid=uid,
                email=email,
                start_time=start_time,
                end_time=end_time,
                day_of_week_mask=day_of_week_mask,
                created_at=created_at,
            )
            for (
                uid,
                start_time,
                end_time,
                day_of_week_mask,
                created_at,
                email,
            ) in (email_response.results or [])
        ]
        assert len(email) <= 1

        push_devices = [
            DailyReminderPushDevice(
                uid=device_uid,
                platform=platform,
                created_at=added_at,
            )
            for (_, _, _, _, _, device_uid, platform, added_at) in (
                push_response.results or []
            )
        ]
        push = [
            DailyReminderPushItem(
                uid=uid,
                devices=push_devices,
                start_time=start_time,
                end_time=end_time,
                day_of_week_mask=day_of_week_mask,
                created_at=created_at,
            )
            for (
                uid,
                start_time,
                end_time,
                day_of_week_mask,
                created_at,
                _,
                _,
                _,
            ) in (push_response.results[:1] if push_response.results else [])
        ]
        assert len(push) <= 1

        return Response(
            content=DailyRemindersResponse(
                sms=sms[0] if sms else None,
                email=email[0] if email else None,
                push=push[0] if push else None,
            ).json(),
            headers={
                "Content-Type": "application/json; charset=utf-8",
                "Cache-Control": "no-store",
            },
            status_code=200,
        )
